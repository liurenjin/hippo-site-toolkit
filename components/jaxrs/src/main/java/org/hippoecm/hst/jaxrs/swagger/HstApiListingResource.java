/*
 * Copyright 2017 Hippo B.V. (http://www.onehippo.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.hippoecm.hst.jaxrs.swagger;

import javax.servlet.ServletConfig;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Application;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;

import org.hippoecm.hst.container.RequestContextProvider;
import org.hippoecm.hst.core.linking.HstLink;
import org.hippoecm.hst.core.request.HstRequestContext;
import org.hippoecm.hst.util.HstRequestUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.swagger.annotations.ApiOperation;
import io.swagger.jaxrs.listing.ApiListingResource;
import io.swagger.models.Swagger;
import io.swagger.util.Yaml;

/**
 * HST specific Swagger API listing JAX-RS Resource.
 * <P>
 * This overrides the {@link Swagger}'s base path by resolving the currently resolved mount path.
 * </P>
 * <P>
 * <EM>NOTE</EM>: Also, let's produce only in YAML format, "/swagger.yaml", since the Swagger UI is more stable with
 * YAML format than with JSON format, in general.
 * </P>
 */
@Path("/swagger.yaml")
@Produces({ "application/yaml" })
public class HstApiListingResource extends ApiListingResource {

    private static Logger log = LoggerFactory.getLogger(HstApiListingResource.class);

    public HstApiListingResource() {
        super();
    }

    @GET
    @Produces({ "application/yaml" })
    @ApiOperation(value = "The swagger definition in either JSON or YAML", hidden = true)
    @Override
    public Response getListing(@Context Application app, @Context ServletConfig sc, @Context HttpHeaders headers,
            @Context UriInfo uriInfo, @PathParam("type") String type) {
        final HstRequestContext requestContext = RequestContextProvider.get();
        final Response response = getListingYamlResponse(app, requestContext.getServletContext(), sc, headers, uriInfo);

        if (response.getStatus() != Response.Status.OK.getStatusCode()) {
            return response;
        }

        try {
            // Read the string YAML entity from the response generated by the super class,
            // and set the host property to the resolved host name, and basePath property to the resolved mount path
            // at runtime by HST-2 API.
            String yaml = response.readEntity(String.class);
            final Swagger swagger = Yaml.mapper().readValue(yaml, Swagger.class);
            swagger.setHost(HstRequestUtils.getFarthestRequestHost(requestContext.getServletRequest()));
            final HstLink baseHstLink = requestContext.getHstLinkCreator().create("/",
                    requestContext.getResolvedMount().getMount());
            swagger.setBasePath(baseHstLink.toUrlForm(requestContext, false));
            return getListingYamlResponseFromSwagger(swagger);
        } catch (Exception e) {
            log.error("Failed to read and replace swagger.", e);
        }

        return response;
    }

    /*
     * This method is just copied simply from io.swagger.jaxrs.listing.BaseApiListingResource#getListingYamlResponse()
     * to generate a Response object from the converted Swagger instance, instead of the default other parameters.
     *
     * NOTE: It's not 100% clear why BaseApiListingResource#getListingYamlResponse() does split lines and write again to
     *       the string builder (perhaps because Jackson ObjectMapper writes \r\n on Windows env?), but let's do the same
     *       way how Swagger code does for now.
     */
    private Response getListingYamlResponseFromSwagger(final Swagger swagger) {
        try {
            if (swagger != null) {
                String yaml = Yaml.mapper().writeValueAsString(swagger);
                StringBuilder b = new StringBuilder();
                String[] parts = yaml.split("\n");
                for (String part : parts) {
                    b.append(part);
                    b.append("\n");
                }
                return Response.ok().entity(b.toString()).type("application/yaml").build();
            }
        } catch (Exception e) {
            log.error("Failed to get listing yaml from swagger.", e);
        }

        return Response.status(404).build();
    }

}
