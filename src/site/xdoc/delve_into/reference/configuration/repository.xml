<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2008 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
    <properties>
        <title>Configuration in Repository</title>
    </properties>
    <body>
        
        <!--
          Text and screenshots copy pasted from PDF
          TODO: review and rewrite text
          TODO: recreate screenshots
          -->
        
        <section name="Configuration in Repository">
            
            <p>
                To assemble HST2 components into a web site, some configuration needs to
                be present in the repository. This configuration can be edited through the
                <a href="http://docs.onehippo.org/hippo-ecm/SNAPSHOT/run-hippo-ecm/configuration/console.html">console application</a>.
            </p>
            
            <p>
                By default you will need the following node structure:
            </p>
            <p>
                <img src="../../images/reference/hst-configuration-nodes.png" width="284" height="131" alt="HST2 configuration nodes"/>
            </p>
            
            <subsection name="hst:sitemap">
                <p>
                    The sitemap is where you configure your URL space.
                    You can create sitemap items that match to a certain pattern in a URL. This is
                    based on regular expressions. Using this technique, you will have powerful control
                    over your URL space.
                </p>
                <p>
                    As an example you can for instance have 3 urls matchers:
                </p>
                <ul>
                    <li>
                        <code>/home</code> (for the homepage)
                    </li>
                    <li>
                        <code>/news</code> (for the news overview page)
                    </li>
                    <li>
                        <code>/news/(.*?)$</code> (for news detail page)
                    </li>
                </ul>
                <p>
                    <img src="../../images/reference/hst-configuration-sitemap.png" width="800" height="609" alt="HST2 sitemap configuration"/>
                </p>
                <p>
                    As you can see in the figure above. The sitemap item with the name 'home' is
                    going to represent the homepage of our current website. The sitemap item has 2
                    properties; the hst:urlmapping and hst:pageLayout property.
                </p>
                <p>
                    In this case the urlmapping is listening to all requests that match the '/home'
                    pattern. When a request to for instance http://localhost:8080/context/home hits
                    the application, the urlmapping determines that the current 'home' sitemap item
                    is read based on the urlmapping defined in the node. It then knows that by
                    reading the hst:pageLayout property, that is has to take the threepane layout
                    which is configured in the hst:layouts section.
                </p>
                <p>
                    Next to properties on the 'home' node there are 3 sub-nodes attached to this
                    node. Each node represents a placeholder on the threepane layout. To create a
                    reference between the sitemap placeholder node and the layouts node, you will
                    need to set a hst:layoutAttribute property on the specific node created for a
                    specific placeholder of the layout. In this case we have a 'left' node on our layout
                    and we want to have the 'left' node for the 'home' sitemap item refer to it, by
                    adding the hst:layoutAttribute with the value left.
                </p>
                <p>
                    As you might have noticed in the figure below, the left placeholder that is defined
                    for the home sitemap item, has 1 module defined for that specific placeholder. In
                    our example it is called module1. The name does not really matter, but the
                    module node needs a specific attribute that points to a hst:module. Each modules
                    needs a specific 'hst:module' property to tell the selected layout which module to
                    use in a specific placeholder.
                </p>
                <p>
                    <img src="../../images/reference/hst-configuration-sitemap2.png" width="800" height="609" alt="HST2 sitemap configuration"/>
                </p>

            </subsection>
            
            <subsection name="hst:layouts">
                
                <p>
                    The layouts configuration sections allows you to create different layouts for
                    different sitemap requests.
                </p>
                <p>
                    The layout can define your master layout (wireframe) of your page. Within a
                    specific layout you will need to define the placeholders that belong to that page.
                    They will be referenced by a hst:sitemap item that also needs to define the
                    placeholders on the page as mentioned in the section above.
                </p>
                <p>
                    As you can see in the figure below we've created a threepane layout, that has a
                    left, middle and right placeholder. The layout node only needs one property;
                    hst:template, which is the front-end template that belongs to this specific layout.
                    In our case '/threepane.jsp'. The Hippo Site Toolkit will be looking for the jsp files
                    in the root of the web application context.
                </p>
                <p>
                    <img src="../../images/reference/hst-configuration-layouts.png" width="800" height="609" alt="HST2 layouts configuration"/>
                </p>
                <p>
                    In this case the threepane.jsp will have 3 containers, which are defined by the
                    nodes underneath the threepane layout. Inside the jsp you can for instance
                    reference to the left container node by using the following tag:
                </p>
                <source><![CDATA[<hst-tmpl:container name="left"/>]]></source>
                <p>
                    The HST will then call the left template container and will search for a node with a
                    layoutAttribute underneath the sitemap node that was matched based on the
                    requested url.
                </p>
                <p>
                    Of course in the example above you will have 3 hst-tmpl:container definitions
                    (left, middle and right)
                </p>
            
            </subsection>
            
            <subsection name="hst:modules">
                
                <p>
                    The hst:modules section is where you define your front-end modules.
                    A module mainly consists of 3 things:
                </p>
                <ol>
                    <li>
                        A template file (hst:template, for instance a JSP)
                    </li>
                    <li>
                        An optional content location where the module can fetch it's content from
                        (hst:contentlocation)
                    </li>
                    <li>
                        Custom configuration (max-items, default sort order, etc)
                    </li>
                </ol>
                <p>
                    In the following example we have the shortnewslist module that renders it
                    content with the shortnewslist.jsp and get's it's content from the folder
                    /content/news.
                </p>
                <p>
                    <img src="../../images/reference/hst-configuration-modules.png" width="800" height="609" alt="HST2 modules configuration"/>
                </p>

            </subsection>
            
            <subsection name="hst:navigation">
                
                <p>
                    The hst:navigation is the node where you can define your navigation that belongs
                    to the web application. This can for instance be used by a navigation module to
                    create a dynamic menu.
                </p>
                <p>
                    The hst:navigation node references to a hst:sitemap item, so it knows how to
                    produce for instance the urls the navigation items.
                </p>
            
            </subsection>
            

        </section>
    </body>
</document>